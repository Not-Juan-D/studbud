{"mappings":"AAAA,uCAAuC;AAGvC,SAAS,YAAY,GAAG;IACtB,IAAI,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,AAAC;IACxC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,EAC5B,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;SAE1B,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;CAE5B;AAED,iEAAiE;AACjE,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,AAAC;AACjD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,AAAC,EAAC,oBAAoB;AACjF,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,AAAC;AACrD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,AAAC;AAEvD,kCAAkC;AAClC,wEAAwE;AACxE,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,KAAK,EAAE;IAC/C,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,0DAA0D;IAElF,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,AAAC,EAAC,sCAAsC;IAC3E,6BAA6B;IAE7B,IAAI,IAAI,GAAG,AAAC,IAAI,IAAI,EAAE,CAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC,8BAA8B;IAA/B;IAEnD,oCAAoC;IACpC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE;QAAC,GAAG;QAAE,IAAI;KAAC,EAAE,KAAK,CAAC,CAAC;IAE7D,6EAA6E;IAC7E,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;CACvB,CAAC;AAEF,2CAA2C;AAC3C,IAAI,QAAQ,GAAG,EAAE,AAAC;AAElB,SAAS,OAAO,CAAC,eAAe,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,aAAa,EAAE,gBAAgB,EAAE;IACtH,IAAI,IAAI,GAAG;QACT,eAAe;QACf,WAAW;QACX,OAAO;QACP,cAAc;QACd,aAAa;QACb,aAAa;QACb,gBAAgB;KACjB,AAAC;IAEF,qCAAqC;IACrC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEpB,+DAA+D;IAC/D,UAAU,CAAC,IAAI,CAAC,CAAC;CAClB;AAGD,2CAA2C;AAC3C,SAAS,UAAU,CAAC,IAAI,EAAE;IACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,AAAC;IACxC,IAAI,CAAC,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;IAEvD,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE3B,mCAAmC;IACnC,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,AAAC;IACjD,IAAI,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,AAAC;IACtD,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IACrC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,qCAAqC;IAElE,uBAAuB;IACvB,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,KAAK,EAAC;QACjD,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,yDAAyD;IACxE,sFAAsF;KACvF,CAAC;IAEF,wEAAwE;IACxE,IAAI,CAAC,KAAK,EAAE,CAAC;CACd","sources":["public/script.js"],"sourcesContent":["// reference code from tutorial content\n\n\nfunction hideFunction() {\n  var x = document.getElementById(\"hide\");\n  if (x.style.display === \"none\") {\n    x.style.display = \"block\";\n  } else {\n    x.style.display = \"none\";\n  }\n}\n\n// Setting up variables for our HTML elements using DOM selection\nconst form = document.getElementById(\"taskform\");\nconst button = document.querySelector(\"#taskform > button\"); // Complex CSS query\nconst tasklist = document.getElementById(\"tasklist\");\nconst taskInput = document.getElementById(\"taskInput\");\n\n// Event listener for Button click\n// This could also be form.addEventListener(\"submit\", function() {...} )\nbutton.addEventListener(\"click\", function(event) {\n  event.preventDefault(); // Not as necessary for button, but needed for form submit\n\n  let task = form.elements.task.value; // could be swapped out for line below\n  //let task = taskInput.value;\n\n  let date = (new Date()).toLocaleDateString('en-US') //Convert to short date format\n\n  // Call the addTask() function using\n  addTask(task, date, \"26/03/2021\", \"Low\", [\"1\", \"30\"], false);\n\n  // Log out the newly populated taskList everytime the button has been pressed\n  console.log(taskList);\n})\n\n// Create an empty array to store our tasks\nvar taskList = [];\n\nfunction addTask(taskDescription, createdDate, dueDate, priorityRating, urgencyRating, estimatedTime, completionStatus) {\n  let task = {\n    taskDescription,\n    createdDate,\n    dueDate,\n    priorityRating,\n    urgencyRating,\n    estimatedTime,\n    completionStatus\n  };\n\n  // Add the task to our array of tasks\n  taskList.push(task);\n\n  // Separate the DOM manipulation from the object creation logic\n  renderTask(task);\n}\n\n\n// Function to display the item on the page\nfunction renderTask(task) {\n  let item = document.createElement(\"li\");\n  item.innerHTML = \"<p>\" + task.taskDescription + \"</p>\";\n\n  tasklist.appendChild(item);\n\n  // Setup delete button DOM elements\n  let delButton = document.createElement(\"button\");\n  let delButtonText = document.createTextNode(\"Delete\");\n  delButton.appendChild(delButtonText);\n  item.appendChild(delButton); // Adds a delete button to every task\n\n  // Listen for when the \n  delButton.addEventListener(\"click\", function(event){\n    item.remove(); // Remove the task item from the page when button clicked\n    // Because we used 'let' to define the item, this will always delete the right element\n  })\n  \n  // Clear the value of the input once the task has been added to the page\n  form.reset();\n}"],"names":[],"version":3,"file":"planner.f3bd186e.js.map","sourceRoot":"/__parcel_source_root/"}